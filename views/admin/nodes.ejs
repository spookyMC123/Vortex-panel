<%- include('../components/admin_template') %>
<main id="content" class="pb-10">
  <div class="bg-transparent">
    <!-- Header Section -->
    <div class="sm:flex sm:items-center px-8 pt-4">
      <div class="sm:flex-auto">
        <h1 class="text-2xl font-bold leading-6 text-white mb-4"><%= req.translations.nodes %></h1>
        <p class="text-sm text-white/60">Manage and configure your server nodes</p>
      </div>
      <% if (req.user.admin === true) { %>
        <div class="mt-4 sm:ml-8 sm:mt-0 sm:flex-none">
          <button id="createButton" type="button" class="hover:scale-95 flex items-center justify-center h-11 gap-2 px-5 text-sm font-medium text-white transition-all duration-200 rounded-full shadow bg-indigo-500 hover:bg-indigo-600 focus:ring-2 focus:ring-indigo-800 focus:ring-offset-2 ring-offset-gray-200 hover:shadow-none">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
            <span>Create Node</span>
          </button>
        </div>
      <% } %>
    </div>

    <!-- Status Messages -->
    <% if (req.query.err=="none" ) { %>
      <div class="mx-8 my-4 rounded-lg shadow-sm border border-emerald-500/30 bg-emerald-500/10 px-4 py-3">
        <div class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-emerald-400 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
          </svg>
          <span class="text-sm font-medium text-white">Node created successfully</span>
        </div>
      </div>
    <% } %>
    
    <% if (req.query.err == "EDITED") { %>
      <div class="mx-8 my-4 rounded-lg shadow-sm border border-emerald-500/30 bg-emerald-500/10 px-4 py-3">
        <div class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-emerald-400 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
          </svg>
          <span class="text-sm font-medium text-white">Node updated successfully</span>
        </div>
      </div>
    <% } %>

    <!-- Empty State -->
    <% if (nodes.length === 0) { %>
      <div class="px-8 mt-12 text-center">
        <div class="max-w-md mx-auto p-8 rounded-xl border border-dashed border-white/20 bg-white/5">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01" />
          </svg>
          <h3 class="mt-4 text-lg font-medium text-white">No nodes configured</h3>
          <p class="mt-2 text-sm text-white/60">Get started by adding your first server node to the system</p>
          <% if (req.user.admin === true) { %>
            <div class="mt-6">
              <button id="emptyStateCreateBtn" type="button" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
                </svg>
                Create Node
              </button>
            </div>
          <% } %>
        </div>
      </div>
    <% } else { %>
      <!-- Nodes Table -->
      <div class="px-8 mt-6">
        <div class="overflow-hidden rounded-xl border border-white/10 bg-white/5 shadow-sm">
          <!-- Table Header -->
          <div class="grid grid-cols-12 gap-4 px-6 py-3 bg-white/5 text-sm font-medium text-white/70 border-b border-white/10">
            <div class="col-span-3"><%= req.translations.name %></div>
            <div class="col-span-2">Status</div>
            <div class="col-span-2">Version</div>
            <div class="col-span-3"><%= req.translations.connection %></div>
            <div class="col-span-2 text-right"><%= req.translations.actions %></div>
          </div>

          <!-- Nodes List -->
          <div class="divide-y divide-white/10">
            <% nodes.forEach(function(node) { %>
              <div class="grid grid-cols-12 gap-4 items-center px-6 py-4 hover:bg-white/5 transition-colors duration-150">
                <!-- Name -->
                <div class="col-span-3 flex items-center space-x-3">
                  <div class="flex-shrink-0">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01" />
                    </svg>
                  </div>
                  <div>
                    <div class="font-medium text-white"><%= node.name %></div>
                    <% if (node.tags) { %>
                      <div class="flex flex-wrap gap-1 mt-1">
                        <% node.tags.split(' - ').forEach(tag => { %>
                          <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-indigo-500/10 text-indigo-300">
                            <%= tag %>
                          </span>
                        <% }); %>
                      </div>
                    <% } %>
                  </div>
                </div>

                <!-- Status -->
                <div class="col-span-2">
                  <% if (node.status == "Online") { %>
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-emerald-500/10 text-emerald-300">
                      <span class="flex w-2 h-2 mr-1.5 rounded-full bg-emerald-400"></span>
                      Online
                    </span>
                  <% } else { %>
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-500/10 text-red-300">
                      <span class="flex w-2 h-2 mr-1.5 rounded-full bg-red-400"></span>
                      Offline
                    </span>
                  <% } %>
                </div>

                <!-- Version -->
                <div class="col-span-2">
                  <code class="text-sm font-mono bg-white/5 px-2 py-1 rounded text-white/80">
                    <%= (node.versionRelease || 'unknown').replace('HydraD ', '').trim() %>
                  </code>
                </div>

                <!-- Connection -->
                <div class="col-span-3">
                  <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white/50 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                    </svg>
                    <span class="text-sm text-white/80"><%= node.address %>:<%= node.port %></span>
                  </div>
                </div>

                <!-- Actions -->
                <div class="col-span-2 flex justify-end space-x-2">
                  <button onclick="configure('<%= node.id %>')" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded shadow-sm text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Configure
                  </button>
                  <button onclick="deletenode('<%= node.id %>')" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded shadow-sm text-white bg-red-500/90 hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                    Remove
                  </button>
                </div>
              </div>
            <% }); %>
          </div>
        </div>
      </div>
    <% } %>

    <!-- Create Node Form (Hidden by default) -->
    <div id="nodeForm" class="mt-6 px-8 w-full hidden">
      <div class="p-6 bg-white/5 border border-white/10 rounded-xl shadow-lg">
        <h2 class="text-lg font-medium text-white mb-6">Create New Node</h2>
        <form class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Node Name -->
            <div>
              <label for="nodeName" class="block text-sm font-medium text-white/80 mb-1"><%= req.translations.name %></label>
              <input id="nodeName" type="text" class="block w-full px-3 py-2 bg-white/5 border border-white/10 rounded-md shadow-sm text-white placeholder-white/30 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" placeholder="e.g. US-East-01" required>
            </div>

            <!-- Node Address -->
            <div>
              <label for="nodeAddress" class="block text-sm font-medium text-white/80 mb-1"><%= req.translations.addressIP %></label>
              <input id="nodeAddress" type="text" class="block w-full px-3 py-2 bg-white/5 border border-white/10 rounded-md shadow-sm text-white placeholder-white/30 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" placeholder="192.168.1.1 or node.example.com" required>
            </div>

            <!-- Node Port -->
            <div>
              <label for="nodePort" class="block text-sm font-medium text-white/80 mb-1"><%= req.translations.deamonPort %></label>
              <input id="nodePort" type="number" class="block w-full px-3 py-2 bg-white/5 border border-white/10 rounded-md shadow-sm text-white placeholder-white/30 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" placeholder="3002" value="3002" min="1" max="65535" required>
            </div>

            <!-- Node RAM -->
            <div>
              <label for="nodeRam" class="block text-sm font-medium text-white/80 mb-1"><%= req.translations.ram %> (MB)</label>
              <div class="relative">
                <input id="nodeRam" type="number" class="block w-full px-3 py-2 bg-white/5 border border-white/10 rounded-md shadow-sm text-white placeholder-white/30 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" placeholder="10240" value="10240" min="256" required>
                <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none text-sm text-white/50">MB</div>
              </div>
            </div>

            <!-- Node Disk -->
            <div>
              <label for="nodeDisk" class="block text-sm font-medium text-white/80 mb-1"><%= req.translations.disk %> (GB)</label>
              <div class="relative">
                <input id="nodeDisk" type="number" class="block w-full px-3 py-2 bg-white/5 border border-white/10 rounded-md shadow-sm text-white placeholder-white/30 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" placeholder="100" value="100" min="1" required>
                <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none text-sm text-white/50">GB</div>
              </div>
            </div>

            <!-- Node Processor -->
            <div>
              <label for="nodeProcessor" class="block text-sm font-medium text-white/80 mb-1"><%= req.translations.cpu %></label>
              <input id="nodeProcessor" type="text" class="block w-full px-3 py-2 bg-white/5 border border-white/10 rounded-md shadow-sm text-white placeholder-white/30 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" placeholder="e.g. Ryzen 9 5950X">
            </div>

            <!-- Tags -->
            <div class="md:col-span-2">
              <label for="tagInput" class="block text-sm font-medium text-white/80 mb-1"><%= req.translations.tags %></label>
              <div id="tagContainer" class="flex flex-wrap gap-2 mb-2"></div>
              <div class="flex">
                <input id="tagInput" type="text" class="flex-1 px-3 py-2 bg-white/5 border border-white/10 rounded-l-md shadow-sm text-white placeholder-white/30 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" placeholder="Add tags (press Enter to add)">
                <button type="button" onclick="addTag()" class="inline-flex items-center px-4 py-2 bg-indigo-500 border border-transparent rounded-r-md shadow-sm text-sm font-medium text-white hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                  Add
                </button>
              </div>
              <p class="mt-1 text-xs text-white/50">Tags help organize your nodes (e.g. location, purpose)</p>
              <input type="hidden" id="tagsHidden" name="tags">
            </div>
          </div>

          <!-- Form Actions -->
          <div class="flex justify-end space-x-3 pt-4">
            <button type="button" id="cancelCreateBtn" class="px-4 py-2 border border-white/10 rounded-md shadow-sm text-sm font-medium text-white bg-transparent hover:bg-white/5 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              Cancel
            </button>
            <button type="submit" id="createNodeBtn" class="inline-flex justify-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              Create Node
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</main>

<!-- Enhanced Configuration Modal -->
<div id="configModal" class="fixed inset-0 z-50 hidden overflow-y-auto">
  <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
    <div class="fixed inset-0 transition-opacity" aria-hidden="true">
      <div class="absolute inset-0 bg-black/80 backdrop-blur-sm"></div>
    </div>
    <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
    <div class="inline-block align-bottom bg-gray-900 rounded-xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
      <div class="px-6 pt-6 pb-4 sm:px-6 sm:pb-4">
        <div class="flex items-start">
          <div class="flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-indigo-500/20">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          </div>
          <div class="ml-4 w-full">
            <h3 class="text-lg leading-6 font-medium text-white" id="modalTitle">Node Configuration</h3>
            <div class="mt-4">
              <p class="text-sm text-white/70 mb-4">Run this command on your node server to automatically configure it:</p>
              
              <!-- Command Box with Copy Button -->
              <div class="relative group">
                <pre id="commandContent" class="bg-black/30 p-4 rounded-md overflow-x-auto text-sm text-emerald-400 font-mono mb-4 whitespace-pre-wrap break-all"></pre>
                <button onclick="copyCommand()" class="absolute top-3 right-3 p-1.5 rounded-md bg-white/10 hover:bg-white/20 text-white/70 hover:text-white transition-all duration-200 group-hover:opacity-100 opacity-0">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                  </svg>
                </button>
                <div id="copySuccess" class="absolute top-3 right-12 hidden items-center px-2 py-1 rounded-md bg-emerald-500/90 text-white text-xs">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                  </svg>
                  Copied!
                </div>
              </div>
              
              <!-- Configuration Details -->
              <div class="mt-6 border-t border-white/10 pt-4">
                <h4 class="text-sm font-medium text-white mb-3">Configuration Details</h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <p class="text-xs text-white/50 mb-1">Node Name</p>
                    <p id="configNodeName" class="text-sm text-white font-mono"></p>
                  </div>
                  <div>
                    <p class="text-xs text-white/50 mb-1">Connection</p>
                    <p id="configNodeConnection" class="text-sm text-white font-mono"></p>
                  </div>
                  <div>
                    <p class="text-xs text-white/50 mb-1">Resources</p>
                    <p id="configNodeResources" class="text-sm text-white font-mono"></p>
                  </div>
                  <div>
                    <p class="text-xs text-white/50 mb-1">Tags</p>
                    <p id="configNodeTags" class="text-sm text-white font-mono"></p>
                  </div>
                </div>
              </div>
              
              <p class="mt-4 text-xs text-white/50">This command will install and configure all required components. Make sure your node server has internet access.</p>
            </div>
          </div>
        </div>
      </div>
      <div class="px-6 py-4 sm:px-6 sm:flex sm:flex-row-reverse border-t border-white/10">
        <button type="button" onclick="closeModal()" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-500 text-base font-medium text-white hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
          Done
        </button>
        <button type="button" onclick="copyCommand()" class="mt-3 w-full inline-flex justify-center rounded-md border border-white/10 shadow-sm px-4 py-2 bg-transparent text-base font-medium text-white hover:bg-white/5 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
          Copy Command
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Loading Spinner -->
<div id="loadingSpinner" class="fixed inset-0 z-50 hidden flex items-center justify-center bg-black/70 backdrop-blur-sm">
  <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-500"></div>
</div>

<script>
  // Toggle Node Form
  document.getElementById('createButton')?.addEventListener('click', function() {
    document.getElementById('nodeForm').classList.toggle('hidden');
    document.getElementById('nodeForm').scrollIntoView({ behavior: 'smooth' });
  });

  document.getElementById('emptyStateCreateBtn')?.addEventListener('click', function() {
    document.getElementById('nodeForm').classList.toggle('hidden');
    document.getElementById('nodeForm').scrollIntoView({ behavior: 'smooth' });
  });

  document.getElementById('cancelCreateBtn')?.addEventListener('click', function() {
    document.getElementById('nodeForm').classList.add('hidden');
  });

  // Show loading spinner
  function showLoading() {
    document.getElementById('loadingSpinner').classList.remove('hidden');
    document.body.classList.add('overflow-hidden');
  }

  // Hide loading spinner
  function hideLoading() {
    document.getElementById('loadingSpinner').classList.add('hidden');
    document.body.classList.remove('overflow-hidden');
  }

  // Node Deletion
  async function deletenode(nodeId) {
    if (!confirm('Are you sure you want to delete this node?')) return;
    
    showLoading();
    
    try {
      let response = await fetch('/nodes/delete', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ nodeId })
      });

      let result = await response.json();

      if (response.ok) {
        alert('Node successfully deleted');
        window.location.reload();
      } else if (result.error === "There are instances on the node") {
        const confirmDelete = confirm('There are still instances on this node. Deleting it will also remove all associated instances. Continue?');

        if (confirmDelete) {
          showLoading();
          response = await fetch(`/nodes/delete?deleteinstances=true`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ nodeId })
          });

          result = await response.json();

          if (response.ok) {
            alert('Node and instances successfully deleted');
            window.location.reload();
          } else {
            alert(result.message || 'Failed to delete node');
          }
        }
      } else {
        alert(result.message || 'Failed to delete node');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to delete node');
    } finally {
      hideLoading();
    }
  }

  // Node Configuration
  async function configure(nodeId) {
    showLoading();
    try {
      const response = await fetch(`/admin/node/${nodeId}/configure-command`);
      if (!response.ok) throw new Error('Failed to fetch configure command');
      
      const data = await response.json();
      showConfigModal(data.configureCommand, data.nodeDetails);
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to get configuration command');
    } finally {
      hideLoading();
    }
  }

  function showConfigModal(command, nodeDetails) {
    const modal = document.getElementById('configModal');
    const commandContent = document.getElementById('commandContent');
    
    commandContent.textContent = command;
    
    // Display node details if available
    if (nodeDetails) {
      document.getElementById('configNodeName').textContent = nodeDetails.name || 'N/A';
      document.getElementById('configNodeConnection').textContent = `${nodeDetails.address}:${nodeDetails.port}`;
      document.getElementById('configNodeResources').textContent = `${nodeDetails.ram}MB RAM, ${nodeDetails.disk}GB Disk`;
      document.getElementById('configNodeTags').textContent = nodeDetails.tags || 'No tags';
    }
    
    modal.classList.remove('hidden');
    document.body.classList.add('overflow-hidden');
  }

  function closeModal() {
    document.getElementById('configModal').classList.add('hidden');
    document.body.classList.remove('overflow-hidden');
  }

  function copyCommand() {
    const command = document.getElementById('commandContent').textContent;
    navigator.clipboard.writeText(command).then(() => {
      const copySuccess = document.getElementById('copySuccess');
      copySuccess.classList.remove('hidden');
      copySuccess.classList.add('flex');
      
      setTimeout(() => {
        copySuccess.classList.add('hidden');
        copySuccess.classList.remove('flex');
      }, 2000);
    }).catch(err => {
      console.error('Failed to copy command:', err);
      alert('Failed to copy command to clipboard');
    });
  }

  // Tag Management
  function addTag() {
    const input = document.getElementById('tagInput');
    const container = document.getElementById('tagContainer');
    const hiddenInput = document.getElementById('tagsHidden');
    const value = input.value.trim();
    
    if (value) {
      // Check if tag already exists
      const existingTags = Array.from(container.children).map(tag => 
        tag.textContent.replace('×', '').trim()
      );
      
      if (existingTags.includes(value)) {
        alert('This tag already exists');
        return;
      }
      
      const tag = document.createElement('span');
      tag.className = 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-indigo-500/10 text-indigo-300';
      tag.textContent = value;
      
      const removeBtn = document.createElement('button');
      removeBtn.className = 'ml-1.5 text-indigo-400 hover:text-indigo-300';
      removeBtn.innerHTML = '&times;';
      removeBtn.onclick = () => {
        tag.remove();
        updateHiddenTags();
      };
      
      tag.appendChild(removeBtn);
      container.appendChild(tag);
      input.value = '';
      updateHiddenTags();
    }
  }

  function updateHiddenTags() {
    const container = document.getElementById('tagContainer');
    const hiddenInput = document.getElementById('tagsHidden');
    const tags = Array.from(container.children)
      .map(tag => tag.textContent.replace('×', '').trim())
      .filter(tag => tag);
    hiddenInput.value = tags.join(' - ');
  }

  document.getElementById('tagInput')?.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      addTag();
    }
  });

  // Create Node
  document.getElementById('nodeForm')?.querySelector('form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const name = document.getElementById('nodeName').value;
    const tags = Array.from(document.getElementById('tagContainer').children)
                     .map(tag => tag.textContent.replace('×', '').trim())
                     .filter(tag => tag);
    const ram = document.getElementById('nodeRam').value;
    const disk = document.getElementById('nodeDisk').value;
    const processor = document.getElementById('nodeProcessor').value;
    const address = document.getElementById('nodeAddress').value;
    const port = document.getElementById('nodePort').value;

    if (!name || !address || !port) {
      alert('Please fill in all required fields');
      return;
    }

    if (port < 1 || port > 65535) {
      alert('Port must be between 1 and 65535');
      return;
    }

    if (ram < 256) {
      alert('RAM must be at least 256MB');
      return;
    }

    if (disk < 1) {
      alert('Disk space must be at least 1GB');
      return;
    }

    const nodeData = {
      name,
      tags: tags.join(' - '),
      ram,
      disk,
      processor,
      address,
      port
    };

    showLoading();
    
    fetch('/nodes/create', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(nodeData)
    })
    .then(response => {
      if (response.ok) {
        window.location.href = '../admin/nodes?err=none';
      } else {
        return response.json().then(err => { throw new Error(err.message || 'Failed to create node'); });
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert(error.message);
    })
    .finally(() => {
      hideLoading();
    });
  });
</script>
<%- include('../components/footer') %>
